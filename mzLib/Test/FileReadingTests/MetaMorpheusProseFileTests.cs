// File: Test/FileReadingTests/MetaMorpheusProseFileTests.cs

using System;
using NUnit.Framework;
using Readers.InternalResults;
using System.IO;
using System.Linq;

namespace Test.FileReadingTests;

[TestFixture]
public class MetaMorpheusProseFileTests
{
    private string _tempDir;
    private string _proseFilePath;
    private string[] _spectraFilePaths;
    private string[] _databaseFilePaths;
    private string _proseFileContent;

    [SetUp]
    public void SetUp()
    {
        _tempDir = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
        Directory.CreateDirectory(_tempDir);

        // Create local spectra files
        _spectraFilePaths = Enumerable.Range(1, 6)
            .Select(i =>
            {
                var file = Path.Combine(_tempDir, $"20100726_Velos1_TaGe_SA_HepG2_{i}-calib.mzML");
                File.WriteAllText(file, "dummy");
                return file;
            })
            .ToArray();

        // Create local database file
        _databaseFilePaths = new[]
        {
            Path.Combine(_tempDir, "uniprotkb_human_proteome_AND_reviewed_t_2024_03_22.xml")
        };
        foreach (var db in _databaseFilePaths)
            File.WriteAllText(db, "dummydb");

        // Compose the prose content with local paths
        _proseFileContent = $"""
                             The data analysis was performed using MetaMorpheus version 1.0.7, available at https://github.com/smith-chem-wisc/MetaMorpheus.

                             Data files were processed on a computer running Microsoft Windows 10.0.22631 with a 64-bit Intel(R) Xeon(R) Gold 5220R CPU @ 2.20GHz processor with 48 threads and 128GB installed RAM. 

                             The total time to perform the Average task on 6 spectra file(s) was 67.45 minutes.

                             Published works using MetaMorpheus software are encouraged to cite the appropriate publications listed in the reference guide, found here: https://github.com/smith-chem-wisc/MetaMorpheus/blob/master/README.md.

                             Spectra files: 
                             	{string.Join(Environment.NewLine + "\t", _spectraFilePaths)}
                             Databases:
                             	{_databaseFilePaths[0]} Downloaded on: 03/27/2024 14:59:19
                             """;

        _proseFilePath = Path.Combine(_tempDir, "AutoGeneratedManuscriptProse.txt");
        File.WriteAllText(_proseFilePath, _proseFileContent);
    }

    [TearDown]
    public void TearDown()
    {
        if (Directory.Exists(_tempDir))
            Directory.Delete(_tempDir, true);
    }

    [Test]
    public void LocateInDirectory_FindsAndParsesProseFile()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);

        Assert.That(proseFile, Is.Not.Null);
        Assert.That(proseFile!.MetaMorpheusVersion, Is.EqualTo("1.0.7"));
        Assert.That(proseFile.FilePath, Is.EqualTo(_proseFilePath));

        Assert.That(proseFile.SpectraFilePaths, Is.Not.Null);
        Assert.That(proseFile.SpectraFilePaths.Length, Is.EqualTo(6));
        for (int i = 0; i < 6; i++)
            Assert.That(proseFile.SpectraFilePaths[i], Is.EqualTo(_spectraFilePaths[i]));

        Assert.That(proseFile.DatabasePaths, Is.Not.Null);
        Assert.That(proseFile.DatabasePaths.Length, Is.EqualTo(1));
        Assert.That(proseFile.DatabasePaths[0], Is.EqualTo(_databaseFilePaths[0]));
    }

    [Test]
    public void LocateInDirectory_Nested_FindsAndParsesProseFile()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(TestContext.CurrentContext.TestDirectory);

        Assert.That(proseFile, Is.Not.Null);
        Assert.That(proseFile!.MetaMorpheusVersion, Is.EqualTo("1.0.7"));

        var expectedPath = Path.Combine(TestContext.CurrentContext.TestDirectory, "FileReadingTests", "SearchResults", "AutoGeneratedManuscriptProse.txt");    
        Assert.That(proseFile.FilePath, Is.EqualTo(expectedPath));

        Assert.That(proseFile.SpectraFilePaths, Is.Not.Null);
        Assert.That(proseFile.SpectraFilePaths.Length, Is.EqualTo(6));
        Assert.That(proseFile.SpectraFilePaths[0], Is.EqualTo(@"B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_1-calib.mzML"));
        Assert.That(proseFile.SpectraFilePaths[5], Is.EqualTo(@"B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_6-calib.mzML"));

        Assert.That(proseFile.DatabasePaths, Is.Not.Null);
        Assert.That(proseFile.DatabasePaths.Length, Is.EqualTo(1));
        Assert.That(proseFile.DatabasePaths[0], Is.EqualTo(@"B:\Users\Nic\Chimeras\Mann_11cell_analysis\uniprotkb_human_proteome_AND_reviewed_t_2024_03_22.xml"));
    }

    [Test] 
    public void FindUnaveragedFile_ReturnsCorrectUnaveragedPath_ForAveragedAndCalib()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        var original = proseFile!.SpectraFilePaths[0];
        var averagedFileName = Path.GetFileNameWithoutExtension(original).Replace("-calib", "") + "-averaged.mzML";
        var averagedFilePath = Path.Combine(_tempDir, averagedFileName);
        File.WriteAllText(averagedFilePath, "dummy");

        var result = proseFile.FindUnaveragedFile(averagedFilePath);

        Assert.That(result, Is.EqualTo(original));
    }

    [Test]
    public void FindUnaveragedFile_AveragedFileDoesNotExist_ReturnsNull()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        var nonExistentPath = Path.Combine(_tempDir, "nonexistent-averaged.mzML");
        var result = proseFile!.FindUnaveragedFile(nonExistentPath);

        Assert.That(result, Is.Null);
    }

    [Test]
    public void FindUnaveragedFile_UnaveragedFileDoesNotExist_ReturnsNull()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        // Remove the unaveraged file
        var original = proseFile!.SpectraFilePaths[0];
        if (File.Exists(original))
            File.Delete(original);

        var averagedFileName = Path.GetFileNameWithoutExtension(original).Replace("-calib", "") + "-averaged.mzML";
        var averagedFilePath = Path.Combine(_tempDir, averagedFileName);
        File.WriteAllText(averagedFilePath, "dummy");

        var result = proseFile.FindUnaveragedFile(averagedFilePath);

        Assert.That(result, Is.Null);
    }

    [Test]
    public void FindUnaveragedFile_ReturnsNull_IfNoMatchingUnaveragedFile()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        var unmatchedAveragedFilePath = Path.Combine(_tempDir, "not_in_list-averaged.mzML");
        File.WriteAllText(unmatchedAveragedFilePath, "dummy");

        var result = proseFile!.FindUnaveragedFile(unmatchedAveragedFilePath);

        Assert.That(result, Is.Null);
    }

    [Test]
    public void FindUnaveragedFile_HandlesCalibAndAveragedSuffixes()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        var original = proseFile!.SpectraFilePaths[2];
        var baseName = Path.GetFileNameWithoutExtension(original).Replace("-calib", "");
        var averagedFileName = baseName + "-calib-averaged.mzML";
        var averagedFilePath = Path.Combine(_tempDir, averagedFileName);
        File.WriteAllText(averagedFilePath, "dummy");

        var result = proseFile.FindUnaveragedFile(averagedFilePath);

        Assert.That(result, Is.EqualTo(original));
    }
}
